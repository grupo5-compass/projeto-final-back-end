// test-api.js - Script para testar a fun√ß√£o fetchFromExternalAPI()
import dotenv from 'dotenv';
import mongoose from 'mongoose';

// Carrega as vari√°veis de ambiente
dotenv.config();

console.log('Vari√°veis de ambiente:');
console.log(`FINANCIAL_INSTITUTION_API_URL_1: ${process.env.FINANCIAL_INSTITUTION_API_URL_1}`);
console.log(`FINANCIAL_INSTITUTION_API_KEY_1: ${process.env.FINANCIAL_INSTITUTION_API_KEY_1}`);
console.log(`FINANCIAL_INSTITUTION_TIMEOUT_1: ${process.env.FINANCIAL_INSTITUTION_TIMEOUT_1}`);
console.log(`MONGODB_URI: ${process.env.MONGODB_URI}\n`);

// S√≥ importa o service se as vari√°veis estiverem carregadas
if (process.env.FINANCIAL_INSTITUTION_API_URL_1) {
    console.log('Vari√°veis carregadas! Importando service...\n');
    
    const { default: FinancialInstitutionService } = await import('../services/financialInstitutionServices.js');
    
    async function testFetchFromExternalAPI() {
        console.log('üîç Executando service - "fetchFromExternalAPI()"');
        
        try {
            const startTime = Date.now();
            const institution = await FinancialInstitutionService.fetchFromExternalAPI();
            const endTime = Date.now();
            const duration = endTime - startTime;
            
            console.log('‚úÖ Dados recebidos da API externa:');
            console.log(`   ‚è±Ô∏è  Tempo de resposta: ${duration}ms`);
            
            if (institution && institution.id) {
                console.log('\nüìã Dados da institui√ß√£o recebida:');
                console.log('   institution:', institution);
            } else {
                console.log('   Nenhuma institui√ß√£o encontrada ou dados inv√°lidos');
            }
            
            console.log('\nüéâ Teste fetchFromExternalAPI() conclu√≠do com sucesso!\n');
            return institution;
            
        } catch (error) {
            console.error('‚ùå Erro durante o teste fetchFromExternalAPI():');
            console.error(`   Tipo: ${error.name || 'Error'}`);
            console.error(`   Mensagem: ${error.message}`);
            
            if (error.cause) {
                console.error(`   Causa: ${error.cause}`);
            }
            
            console.log('\nüîß Poss√≠veis solu√ß√µes:');
            console.log('   1. Verificar se a API externa est√° rodando na porta 7856');
            console.log('   2. Confirmar URL e API Key no arquivo .env');
            console.log('   3. Verificar conectividade de rede');
            console.log('   4. Testar a URL manualmente: curl http://localhost:7856/openfinance/institution');
            throw error;
        }
    }

    async function testSyncInstitution() {
        console.log('üîÑ Executando service - "syncInstitution()"');
        
        try {
            const startTime = Date.now();
            
            // Teste 1: Sincroniza√ß√£o geral (todas as institui√ß√µes)
            console.log('\nüì• Teste 1: Sincroniza√ß√£o geral...');
            const syncResult = await FinancialInstitutionService.syncInstitution();
            
            const endTime = Date.now();
            const duration = endTime - startTime;
            
            console.log('‚úÖ Sincroniza√ß√£o conclu√≠da:');
            console.log(`   ‚è±Ô∏è  Tempo de execu√ß√£o: ${duration}ms`);
            console.log(`   üìä Estat√≠sticas da sincroniza√ß√£o:`);
            console.log(`      - Criadas: ${syncResult.created}`);
            console.log(`      - Atualizadas: ${syncResult.updated}`);
            console.log(`      - Erros: ${syncResult.errors.length}`);
            console.log(`      - Data da sincroniza√ß√£o: ${syncResult.syncDate}`);
            
            if (syncResult.errors.length > 0) {
                console.log('\n‚ö†Ô∏è  Erros encontrados:');
                syncResult.errors.forEach((error, index) => {
                    console.log(`   ${index + 1}. Institui√ß√£o ${error.institutionId}: ${error.error}`);
                });
            }

            // Teste 2: Sincroniza√ß√£o espec√≠fica por ID (se houver dados)
            if (syncResult.created > 0 || syncResult.updated > 0) {
                console.log('\nüì• Teste 2: Sincroniza√ß√£o espec√≠fica por ID...');
                
                // Busca uma institui√ß√£o para testar sincroniza√ß√£o espec√≠fica
                const institutions = await FinancialInstitutionService.getAllInstitutions({ limit: 1 });
                
                if (institutions.length > 0) {
                    const testInstitutionId = institutions[0].id;
                    console.log(`   üéØ Testando sincroniza√ß√£o da institui√ß√£o: ${testInstitutionId}`);
                    
                    const specificSyncResult = await FinancialInstitutionService.syncInstitution(testInstitutionId);
                    
                    console.log('   ‚úÖ Sincroniza√ß√£o espec√≠fica conclu√≠da:');
                    console.log(`      - Criadas: ${specificSyncResult.created}`);
                    console.log(`      - Atualizadas: ${specificSyncResult.updated}`);
                    console.log(`      - Erros: ${specificSyncResult.errors.length}`);
                }
            }

            console.log('\nüéâ Teste syncInstitution() conclu√≠do com sucesso!\n');
            return syncResult;
            
        } catch (error) {
            console.error('‚ùå Erro durante o teste syncInstitution():');
            console.error(`   Tipo: ${error.name || 'Error'}`);
            console.error(`   Mensagem: ${error.message}`);
            
            if (error.cause) {
                console.error(`   Causa: ${error.cause}`);
            }
            
            console.log('\nüîß Poss√≠veis solu√ß√µes:');
            console.log('   1. Verificar conex√£o com MongoDB');
            console.log('   2. Verificar se a API externa est√° respondendo');
            console.log('   3. Verificar permiss√µes de escrita no banco de dados');
            console.log('   4. Verificar logs do MongoDB para erros espec√≠ficos');
            throw error;
        }
    }
    
    // Executa os testes em sequ√™ncia
    console.log('üöÄ Iniciando bateria de testes...\n');
    
    try {
        // Inicializa conex√£o MongoDB
        console.log('üîå Conectando ao MongoDB...');
        await mongoose.connect(process.env.MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ MongoDB conectado!\n');
        
        // Teste 1: fetchFromExternalAPI
        await testFetchFromExternalAPI();
        
        // Teste 2: syncInstitution
        await testSyncInstitution();
        
        console.log('üéä Todos os testes conclu√≠dos com sucesso!');
        
    } catch (error) {
        console.error('\nüí• Falha na execu√ß√£o dos testes:', error.message);
        process.exit(1);
    } finally {
        // Fecha conex√£o MongoDB
        if (mongoose.connection.readyState === 1) {
            await mongoose.connection.close();
            console.log('\nüîå Conex√£o MongoDB fechada');
        }
    }
    
} else {
    console.error('‚ùå Vari√°veis de ambiente n√£o carregadas!');
    console.log('üîß Verifique se o arquivo .env existe e est√° no diret√≥rio correto.');
}